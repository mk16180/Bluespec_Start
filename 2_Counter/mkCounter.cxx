/*
 * Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87a)
 * 
 * On Mon Sep  8 02:19:58 EDT 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkCounter.h"


/* String declarations */
static std::string const __str_literal_1("Count = %0d", 11u);
static std::string const __str_literal_2("dCount = %0d", 12u);


/* Constructor */
MOD_mkCounter::MOD_mkCounter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_count(simHdl, "count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_dcount(simHdl, "dcount", this, 8u, (tUInt8)10u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCounter::init_symbols_0()
{
  init_symbol(&symbols[0u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[1u], "dcount", SYM_MODULE, &INST_dcount);
  init_symbol(&symbols[2u], "RL_decrement", SYM_RULE);
  init_symbol(&symbols[3u], "RL_increment", SYM_RULE);
  init_symbol(&symbols[4u], "x__h229", SYM_DEF, &DEF_x__h229, 8u);
  init_symbol(&symbols[5u], "x__h360", SYM_DEF, &DEF_x__h360, 8u);
}


/* Rule actions */

void MOD_mkCounter::RL_increment()
{
  tUInt8 DEF_count_PLUS_1___d5;
  tUInt8 DEF_count_EQ_10___d4;
  DEF_x__h229 = INST_count.METH_read();
  DEF_count_EQ_10___d4 = DEF_x__h229 == (tUInt8)10u;
  DEF_count_PLUS_1___d5 = (tUInt8)255u & (DEF_x__h229 + (tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_count_EQ_10___d4)
      dollar_finish(sim_hdl, "32", 1u);
  INST_count.METH_write(DEF_count_PLUS_1___d5);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_count_PLUS_1___d5);
}

void MOD_mkCounter::RL_decrement()
{
  tUInt8 DEF_dcount_MINUS_1___d7;
  DEF_x__h360 = INST_dcount.METH_read();
  DEF_dcount_EQ_0___d2 = DEF_x__h360 == (tUInt8)0u;
  DEF_dcount_MINUS_1___d7 = (tUInt8)255u & (DEF_x__h360 - (tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_dcount_EQ_0___d2)
      dollar_finish(sim_hdl, "32", 1u);
  INST_dcount.METH_write(DEF_dcount_MINUS_1___d7);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,8", &__str_literal_2, DEF_dcount_MINUS_1___d7);
    if (DEF_dcount_EQ_0___d2)
      dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkCounter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dcount.reset_RST(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCounter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCounter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_count.dump_state(indent + 2u);
  INST_dcount.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCounter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 6u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dcount_EQ_0___d2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h229", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h360", 8u);
  num = INST_count.dump_VCD_defs(num);
  num = INST_dcount.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCounter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCounter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkCounter::vcd_defs(tVCDDumpType dt, MOD_mkCounter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_dcount_EQ_0___d2) != DEF_dcount_EQ_0___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_dcount_EQ_0___d2, 1u);
	backing.DEF_dcount_EQ_0___d2 = DEF_dcount_EQ_0___d2;
      }
      ++num;
      if ((backing.DEF_x__h229) != DEF_x__h229)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h229, 8u);
	backing.DEF_x__h229 = DEF_x__h229;
      }
      ++num;
      if ((backing.DEF_x__h360) != DEF_x__h360)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h360, 8u);
	backing.DEF_x__h360 = DEF_x__h360;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_dcount_EQ_0___d2, 1u);
      backing.DEF_dcount_EQ_0___d2 = DEF_dcount_EQ_0___d2;
      vcd_write_val(sim_hdl, num++, DEF_x__h229, 8u);
      backing.DEF_x__h229 = DEF_x__h229;
      vcd_write_val(sim_hdl, num++, DEF_x__h360, 8u);
      backing.DEF_x__h360 = DEF_x__h360;
    }
}

void MOD_mkCounter::vcd_prims(tVCDDumpType dt, MOD_mkCounter &backing)
{
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_dcount.dump_VCD(dt, backing.INST_dcount);
}
