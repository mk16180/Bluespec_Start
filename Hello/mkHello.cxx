/*
 * Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87a)
 * 
 * On Mon Sep  8 01:01:55 EDT 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkHello.h"


/* String declarations */
static std::string const __str_literal_1("Hello, Bluespec World!", 22u);


/* Constructor */
MOD_mkHello::MOD_mkHello(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 1u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkHello::init_symbols_0()
{
  init_symbol(&symbols[0u], "RL_say_hello", SYM_RULE);
}


/* Rule actions */

void MOD_mkHello::RL_say_hello()
{
  dollar_display(sim_hdl, this, "s", &__str_literal_1);
  dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkHello::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkHello::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkHello::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkHello::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkHello::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkHello &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkHello::vcd_defs(tVCDDumpType dt, MOD_mkHello &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
